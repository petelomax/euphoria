include bottle-song.e

--<do not edit>
--ignore canonical_data.e
--</do not edit>

constant song = """
Ten green bottles hanging on the wall,
Ten green bottles hanging on the wall,
And if one green bottle should accidentally fall,
There'll be nine green bottles hanging on the wall.

Nine green bottles hanging on the wall,
Nine green bottles hanging on the wall,
And if one green bottle should accidentally fall,
There'll be eight green bottles hanging on the wall.

Eight green bottles hanging on the wall,
Eight green bottles hanging on the wall,
And if one green bottle should accidentally fall,
There'll be seven green bottles hanging on the wall.

Seven green bottles hanging on the wall,
Seven green bottles hanging on the wall,
And if one green bottle should accidentally fall,
There'll be six green bottles hanging on the wall.

Six green bottles hanging on the wall,
Six green bottles hanging on the wall,
And if one green bottle should accidentally fall,
There'll be five green bottles hanging on the wall.

Five green bottles hanging on the wall,
Five green bottles hanging on the wall,
And if one green bottle should accidentally fall,
There'll be four green bottles hanging on the wall.

Four green bottles hanging on the wall,
Four green bottles hanging on the wall,
And if one green bottle should accidentally fall,
There'll be three green bottles hanging on the wall.

Three green bottles hanging on the wall,
Three green bottles hanging on the wall,
And if one green bottle should accidentally fall,
There'll be two green bottles hanging on the wall.

Two green bottles hanging on the wall,
Two green bottles hanging on the wall,
And if one green bottle should accidentally fall,
There'll be one green bottle hanging on the wall.

One green bottle hanging on the wall,
One green bottle hanging on the wall,
And if one green bottle should accidentally fall,
There'll be no green bottles hanging on the wall.""",

    verses = apply(true,split,{split(song,"\n\n"),"\n"}),
     tests = {{"first generic verse",10,1,verses[1]},
              {"last generic verse",3,1,verses[8]},
              {"verse with 2 bottles",2,1,verses[9]},
              {"verse with 1 bottle",1,1,verses[10]},
              {"first two verses",10,2,join(verses[1..2],{""})},
              {"last three verses",3,3,join(verses[8..10],{""})},
              {"all verses",10,10,join(verses,{""})}}

set_test_verbosity(TEST_SHOW_ALL)
for t in tests do
    {string desc, integer start, integer take, sequence expected} = t
    sequence actual = recite(start,take)
    if actual=expected then
        test_equal(actual,expected,desc)
    else
        integer la = length(actual),
                le = length(expected)
        test_equal(la,le,desc&" (expected length)")
        for i=1 to min(la,le) do
            string ai = actual[i],
                   ei = expected[i]
            if ai!=ei then
                test_equal(ai,ei,desc&" (line %d)",{i})
            end if
        end for
    end if
end for
test_summary()


include variable-length-quantity.e

--<do not edit>
constant canonical_data = {
{{0x0},{0x0},"zero"},
{{0x40},{0x40},"arbitrary single byte"},
{{0x7f},{0x7f},"largest single byte"},
{{0x80},{0x81,0x0},"smallest double byte"},
{{0x2000},{0xc0,0x0},"arbitrary double byte"},
{{0x3fff},{0xff,0x7f},"largest double byte"},
{{0x4000},{0x81,0x80,0x0},"smallest triple byte"},
{{0x100000},{0xc0,0x80,0x0},"arbitrary triple byte"},
{{0x1fffff},{0xff,0xff,0x7f},"largest triple byte"},
{{0x200000},{0x81,0x80,0x80,0x0},"smallest quadruple byte"},
{{0x8000000},{0xc0,0x80,0x80,0x0},"arbitrary quadruple byte"},
{{0xfffffff},{0xff,0xff,0xff,0x7f},"largest quadruple byte"},
{{0x10000000},{0x81,0x80,0x80,0x80,0x0},"smallest quintuple byte"},
{{0xff000000},{0x8f,0xf8,0x80,0x80,0x0},"arbitrary quintuple byte"},
{{0xffffffff},{0x8f,0xff,0xff,0xff,0x7f},"maximum 32-bit integer input"},
{{0x40,0x7f},{0x40,0x7f},"two single-byte values"},
{{0x4000,0x123456},{0x81,0x80,0x0,0xc8,0xe8,0x56},"two multi-byte values"},
{{0x2000,0x123456,0xfffffff,0x0,0x3fff,0x4000},{0xc0,0x0,0xc8,0xe8,0x56,0xff,0xff,0xff,0x7f,0x0,0xff,0x7f,0x81,0x80,0x0},"many multi-byte values"},
{{0x7f},{0x7f},"one byte"},
{{0x2000},{0xc0,0x0},"two bytes"},
{{0x1fffff},{0xff,0xff,0x7f},"three bytes"},
{{0x200000},{0x81,0x80,0x80,0x0},"four bytes"},
{{0xffffffff},{0x8f,0xff,0xff,0xff,0x7f},"maximum 32-bit integer"},
{"crash(`incomplete`)",{0xff},"incomplete sequence causes error"},
{"crash(`incomplete`)",{0x80},"incomplete sequence causes error, even if value is zero"},
{{0x2000,0x123456,0xfffffff,0x0,0x3fff,0x4000},{0xc0,0x0,0xc8,0xe8,0x56,0xff,0xff,0xff,0x7f,0x0,0xff,0x7f,0x81,0x80,0x0},"multiple values"},
}
--</do not edit>

set_test_verbosity(TEST_SHOW_ALL)
for t in canonical_data do
    sequence {decoded, encoded, desc} = t
    if not string(decoded) then
        test_equal(vlq_encode(decoded),encoded,desc)
        test_equal(vlq_decode(encoded),decoded,desc)
    else
        string error = ""
        try
            printf(1,"what?:%v\n",{vlq_decode(encoded)})
        catch e
            error = e[8]
        end try
        test_equal(error,decoded,desc)
    end if
end for
test_summary()

/*
function svlg(sequence s)
    string res = ""
    for i=1 to length(s) do
        res &= sprintf("#%02x:",{s[i]})
    end for
    return res[1..$-1]
end function
 
constant testNumbers = { #200000, #1FFFFF, 1, 127, 128 }
sequence s = vlq_encode(testNumbers),
         decoded = vlq_decode(s)
printf(1,"%s -> %s -> %s\n",{svlg(testNumbers),svlg(s),svlg(decoded)})
if decoded!=testNumbers then crash("something wrong") end if
*/


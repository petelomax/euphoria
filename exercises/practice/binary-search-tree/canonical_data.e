-- created automatically by the test generator and brutally overwritten on a regular basis.
-- To permanently mark a test as ignoring all of this copy the following into test.exw:
--<do not edit>
--ignore canonical_data.e
--</do not edit>
-- Otherwise copy/paste this lot (rather than include, so it can verify up-to-date-ness):
--  **NB** If this begins {-1,{`exercise`,`<slug_name>`, then it's still raw json, and the
--          test generator needs updating to munge it, or you can just ignore it as above.
--<do not edit>
constant canonical_data = {
{-1,
 {`exercise`, `binary-search-tree`},
 {`comments`,
  {-2, `Each test case assumes an empty/new tree.`,
   `As per exercism/problem-specifications#996 key 'treeData' counts as an input`,
   `to test generators.`,
   `The key 'treeData' represents an array of numbers for which the data should be `,
   `inserted/added to the tree as it appears in the array from left to right.`,
   `e.g. treeData: ['2', '1', '3', '6', '7', '5']`,
   `Insert 2. Insert 1. Insert 3. Insert 6, so on...`,
   `This canonical-data does not restrict the data type of array elements to either`,
   `strings or integers.`,
   `The key 'expected' represents tree state as JSON object of schema :`,
   `{`, `    'title':'nodeObject',`, `    'type':'object',`,
   `    'properties':{`, `        'data':{`, `            'type':'string'`,
   `        },`, `        'left':{`, `            'type':'nodeObject'`,
   `        },`, `        'right':{`, `            'type':'nodeObject'`,
   `        }`, `    },`, `    'required':['data', 'left', 'right']`, `}`}},
 {`cases`,
  {-2,
   {-1, {`uuid`, `e9c93a78-c536-4750-a336-94583d23fafa`},
    {`description`, `data is retained`}, {`property`, `data`},
    {`input`, {-1, {`treeData`, {-2, `4`}}}},
    {`expected`,
     {-1, {`data`, `4`}, {`left`, {-3, `null`}}, {`right`, {-3, `null`}}}}},
   {-1, {`description`, `insert data at proper node`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `7a95c9e8-69f6-476a-b0c4-4170cb3f7c91`},
       {`description`, `smaller number at left node`}, {`property`, `data`},
       {`input`, {-1, {`treeData`, {-2, `4`, `2`}}}},
       {`expected`,
        {-1, {`data`, `4`},
         {`left`,
          {-1, {`data`, `2`}, {`left`, {-3, `null`}},
           {`right`, {-3, `null`}}}}, {`right`, {-3, `null`}}}}},
      {-1, {`uuid`, `22b89499-9805-4703-a159-1a6e434c1585`},
       {`description`, `same number at left node`}, {`property`, `data`},
       {`input`, {-1, {`treeData`, {-2, `4`, `4`}}}},
       {`expected`,
        {-1, {`data`, `4`},
         {`left`,
          {-1, {`data`, `4`}, {`left`, {-3, `null`}},
           {`right`, {-3, `null`}}}}, {`right`, {-3, `null`}}}}},
      {-1, {`uuid`, `2e85fdde-77b1-41ed-b6ac-26ce6b663e34`},
       {`description`, `greater number at right node`},
       {`property`, `data`}, {`input`, {-1, {`treeData`, {-2, `4`, `5`}}}},
       {`expected`,
        {-1, {`data`, `4`}, {`left`, {-3, `null`}},
         {`right`,
          {-1, {`data`, `5`}, {`left`, {-3, `null`}},
           {`right`, {-3, `null`}}}}}}}}}},
   {-1, {`uuid`, `dd898658-40ab-41d0-965e-7f145bf66e0b`},
    {`description`, `can create complex tree`}, {`property`, `data`},
    {`input`, {-1, {`treeData`, {-2, `4`, `2`, `6`, `1`, `3`, `5`, `7`}}}},
    {`expected`,
     {-1, {`data`, `4`},
      {`left`,
       {-1, {`data`, `2`},
        {`left`,
         {-1, {`data`, `1`}, {`left`, {-3, `null`}},
          {`right`, {-3, `null`}}}},
        {`right`,
         {-1, {`data`, `3`}, {`left`, {-3, `null`}},
          {`right`, {-3, `null`}}}}}},
      {`right`,
       {-1, {`data`, `6`},
        {`left`,
         {-1, {`data`, `5`}, {`left`, {-3, `null`}},
          {`right`, {-3, `null`}}}},
        {`right`,
         {-1, {`data`, `7`}, {`left`, {-3, `null`}},
          {`right`, {-3, `null`}}}}}}}}},
   {-1, {`description`, `can sort data`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `9e0c06ef-aeca-4202-b8e4-97f1ed057d56`},
       {`description`, `can sort single number`},
       {`property`, `sortedData`}, {`input`, {-1, {`treeData`, {-2, `2`}}}},
       {`expected`, {-2, `2`}}},
      {-1, {`uuid`, `425e6d07-fceb-4681-a4f4-e46920e380bb`},
       {`description`, `can sort if second number is smaller than first`},
       {`property`, `sortedData`},
       {`input`, {-1, {`treeData`, {-2, `2`, `1`}}}},
       {`expected`, {-2, `1`, `2`}}},
      {-1, {`uuid`, `bd7532cc-6988-4259-bac8-1d50140079ab`},
       {`description`, `can sort if second number is same as first`},
       {`property`, `sortedData`},
       {`input`, {-1, {`treeData`, {-2, `2`, `2`}}}},
       {`expected`, {-2, `2`, `2`}}},
      {-1, {`uuid`, `b6d1b3a5-9d79-44fd-9013-c83ca92ddd36`},
       {`description`, `can sort if second number is greater than first`},
       {`property`, `sortedData`},
       {`input`, {-1, {`treeData`, {-2, `2`, `3`}}}},
       {`expected`, {-2, `2`, `3`}}},
      {-1, {`uuid`, `d00ec9bd-1288-4171-b968-d44d0808c1c8`},
       {`description`, `can sort complex tree`}, {`property`, `sortedData`},
       {`input`, {-1, {`treeData`, {-2, `2`, `1`, `3`, `6`, `7`, `5`}}}},
       {`expected`, {-2, `1`, `2`, `3`, `5`, `6`, `7`}}}}}}}}}
}
--</do not edit>


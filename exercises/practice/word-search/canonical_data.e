-- created automatically by the test generator and brutally overwritten on a regular basis.
-- To permanently mark a test as ignoring all of this copy the following into test.exw:
--<do not edit>
--ignore canonical_data.e
--</do not edit>
-- Otherwise copy/paste this lot (rather than include, so it can verify up-to-date-ness):
--  **NB** If this begins {-1,{`exercise`,`<slug_name>`, then it's still raw json, and the
--          test generator needs updating to munge it, or you can just ignore it as above.
--<do not edit>
constant canonical_data = {
{-1,
 {`exercise`, `word-search`},
 {`comments`, {-2, `Grid rows and columns are 1-indexed.`}},
 {`cases`,
  {-2,
   {-1, {`uuid`, `b4057815-0d01-41f0-9119-6a91f54b2a0a`},
    {`description`,
     `Should accept an initial game grid and a target search word`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `jefblpepre`}},
      {`wordsToSearchFor`, {-2, `clojure`}}}},
    {`expected`, {-1, {`clojure`, {-3, `null`}}}}},
   {-1, {`uuid`, `6b22bcc5-6cbf-4674-931b-d2edbff73132`},
    {`description`, `Should locate one word written left to right`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `clojurermt`}},
      {`wordsToSearchFor`, {-2, `clojure`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 1}}},
        {`end`, {-1, {`column`, 7}, {`row`, 1}}}}}}}},
   {-1, {`uuid`, `ff462410-434b-442d-9bc3-3360c75f34a8`},
    {`description`,
     `Should locate the same word written left to right in a different position`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `mtclojurer`}},
      {`wordsToSearchFor`, {-2, `clojure`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 3}, {`row`, 1}}},
        {`end`, {-1, {`column`, 9}, {`row`, 1}}}}}}}},
   {-1, {`uuid`, `a02febae-6347-443e-b99c-ab0afb0b8fca`},
    {`description`, `Should locate a different left to right word`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `coffeelplx`}},
      {`wordsToSearchFor`, {-2, `coffee`}}}},
    {`expected`,
     {-1,
      {`coffee`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 1}}},
        {`end`, {-1, {`column`, 6}, {`row`, 1}}}}}}}},
   {-1, {`uuid`, `e42e9987-6304-4e13-8232-fa07d5280130`},
    {`description`,
     `Should locate that different left to right word in a different position`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `xcoffeezlp`}},
      {`wordsToSearchFor`, {-2, `coffee`}}}},
    {`expected`,
     {-1,
      {`coffee`,
       {-1, {`start`, {-1, {`column`, 2}, {`row`, 1}}},
        {`end`, {-1, {`column`, 7}, {`row`, 1}}}}}}}},
   {-1, {`uuid`, `9bff3cee-49b9-4775-bdfb-d55b43a70b2f`},
    {`description`, `Should locate a left to right word in two line grid`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `jefblpepre`, `tclojurerm`}},
      {`wordsToSearchFor`, {-2, `clojure`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 2}, {`row`, 2}}},
        {`end`, {-1, {`column`, 8}, {`row`, 2}}}}}}}},
   {-1, {`uuid`, `851a35fb-f499-4ec1-9581-395a87903a22`},
    {`description`, `Should locate a left to right word in three line grid`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `camdcimgtc`, `jefblpepre`, `clojurermt`}},
      {`wordsToSearchFor`, {-2, `clojure`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 3}}},
        {`end`, {-1, {`column`, 7}, {`row`, 3}}}}}}}},
   {-1, {`uuid`, `2f3dcf84-ba7d-4b75-8b8d-a3672b32c035`},
    {`description`, `Should locate a left to right word in ten line grid`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `screeaumgr`, `alxhpburyi`,
        `jalaycalmp`, `clojurermt`}}, {`wordsToSearchFor`, {-2, `clojure`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 10}}},
        {`end`, {-1, {`column`, 7}, {`row`, 10}}}}}}}},
   {-1, {`uuid`, `006d4856-f365-4e84-a18c-7d129ce9eefb`},
    {`description`,
     `Should locate that left to right word in a different position in a ten line grid`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `screeaumgr`, `alxhpburyi`,
        `clojurermt`, `jalaycalmp`}}, {`wordsToSearchFor`, {-2, `clojure`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 9}}},
        {`end`, {-1, {`column`, 7}, {`row`, 9}}}}}}}},
   {-1, {`uuid`, `eff7ac9f-ff11-443e-9747-40850c12ab60`},
    {`description`,
     `Should locate a different left to right word in a ten line grid`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `fortranftw`, `alxhpburyi`,
        `clojurermt`, `jalaycalmp`}}, {`wordsToSearchFor`, {-2, `fortran`}}}},
    {`expected`,
     {-1,
      {`fortran`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 7}}},
        {`end`, {-1, {`column`, 7}, {`row`, 7}}}}}}}},
   {-1, {`uuid`, `dea39f86-8c67-4164-8884-13bfc48bd13b`},
    {`description`, `Should locate multiple words`}, {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `fortranftw`, `alxhpburyi`,
        `jalaycalmp`, `clojurermt`}},
      {`wordsToSearchFor`, {-2, `fortran`, `clojure`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 10}}},
        {`end`, {-1, {`column`, 7}, {`row`, 10}}}}},
      {`fortran`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 7}}},
        {`end`, {-1, {`column`, 7}, {`row`, 7}}}}}}}},
   {-1, {`uuid`, `29e6a6a5-f80c-48a6-8e68-05bbbe187a09`},
    {`description`, `Should locate a single word written right to left`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `rixilelhrs`}},
      {`wordsToSearchFor`, {-2, `elixir`}}}},
    {`expected`,
     {-1,
      {`elixir`,
       {-1, {`start`, {-1, {`column`, 6}, {`row`, 1}}},
        {`end`, {-1, {`column`, 1}, {`row`, 1}}}}}}}},
   {-1, {`uuid`, `3cf34428-b43f-48b6-b332-ea0b8836011d`},
    {`description`,
     `Should locate multiple words written in different horizontal directions`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `screeaumgr`, `alxhpburyi`,
        `jalaycalmp`, `clojurermt`}},
      {`wordsToSearchFor`, {-2, `elixir`, `clojure`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 10}}},
        {`end`, {-1, {`column`, 7}, {`row`, 10}}}}},
      {`elixir`,
       {-1, {`start`, {-1, {`column`, 6}, {`row`, 5}}},
        {`end`, {-1, {`column`, 1}, {`row`, 5}}}}}}}},
   {-1, {`uuid`, `2c8cd344-a02f-464b-93b6-8bf1bd890003`},
    {`description`, `Should locate words written top to bottom`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `screeaumgr`, `alxhpburyi`,
        `jalaycalmp`, `clojurermt`}},
      {`wordsToSearchFor`, {-2, `clojure`, `elixir`, `ecmascript`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 10}}},
        {`end`, {-1, {`column`, 7}, {`row`, 10}}}}},
      {`elixir`,
       {-1, {`start`, {-1, {`column`, 6}, {`row`, 5}}},
        {`end`, {-1, {`column`, 1}, {`row`, 5}}}}},
      {`ecmascript`,
       {-1, {`start`, {-1, {`column`, 10}, {`row`, 1}}},
        {`end`, {-1, {`column`, 10}, {`row`, 10}}}}}}}},
   {-1, {`uuid`, `9ee1e43d-e59d-4c32-9a5f-6a22d4a1550f`},
    {`description`, `Should locate words written bottom to top`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `screeaumgr`, `alxhpburyi`,
        `jalaycalmp`, `clojurermt`}},
      {`wordsToSearchFor`, {-2, `clojure`, `elixir`, `ecmascript`, `rust`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 10}}},
        {`end`, {-1, {`column`, 7}, {`row`, 10}}}}},
      {`elixir`,
       {-1, {`start`, {-1, {`column`, 6}, {`row`, 5}}},
        {`end`, {-1, {`column`, 1}, {`row`, 5}}}}},
      {`ecmascript`,
       {-1, {`start`, {-1, {`column`, 10}, {`row`, 1}}},
        {`end`, {-1, {`column`, 10}, {`row`, 10}}}}},
      {`rust`,
       {-1, {`start`, {-1, {`column`, 9}, {`row`, 5}}},
        {`end`, {-1, {`column`, 9}, {`row`, 2}}}}}}}},
   {-1, {`uuid`, `6a21a676-f59e-4238-8e88-9f81015afae9`},
    {`description`, `Should locate words written top left to bottom right`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `screeaumgr`, `alxhpburyi`,
        `jalaycalmp`, `clojurermt`}},
      {`wordsToSearchFor`,
       {-2, `clojure`, `elixir`, `ecmascript`, `rust`, `java`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 10}}},
        {`end`, {-1, {`column`, 7}, {`row`, 10}}}}},
      {`elixir`,
       {-1, {`start`, {-1, {`column`, 6}, {`row`, 5}}},
        {`end`, {-1, {`column`, 1}, {`row`, 5}}}}},
      {`ecmascript`,
       {-1, {`start`, {-1, {`column`, 10}, {`row`, 1}}},
        {`end`, {-1, {`column`, 10}, {`row`, 10}}}}},
      {`rust`,
       {-1, {`start`, {-1, {`column`, 9}, {`row`, 5}}},
        {`end`, {-1, {`column`, 9}, {`row`, 2}}}}},
      {`java`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 1}}},
        {`end`, {-1, {`column`, 4}, {`row`, 4}}}}}}}},
   {-1, {`uuid`, `c9125189-1861-4b0d-a14e-ba5dab29ca7c`},
    {`description`, `Should locate words written bottom right to top left`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `screeaumgr`, `alxhpburyi`,
        `jalaycalmp`, `clojurermt`}},
      {`wordsToSearchFor`,
       {-2, `clojure`, `elixir`, `ecmascript`, `rust`, `java`, `lua`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 10}}},
        {`end`, {-1, {`column`, 7}, {`row`, 10}}}}},
      {`elixir`,
       {-1, {`start`, {-1, {`column`, 6}, {`row`, 5}}},
        {`end`, {-1, {`column`, 1}, {`row`, 5}}}}},
      {`ecmascript`,
       {-1, {`start`, {-1, {`column`, 10}, {`row`, 1}}},
        {`end`, {-1, {`column`, 10}, {`row`, 10}}}}},
      {`rust`,
       {-1, {`start`, {-1, {`column`, 9}, {`row`, 5}}},
        {`end`, {-1, {`column`, 9}, {`row`, 2}}}}},
      {`java`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 1}}},
        {`end`, {-1, {`column`, 4}, {`row`, 4}}}}},
      {`lua`,
       {-1, {`start`, {-1, {`column`, 8}, {`row`, 9}}},
        {`end`, {-1, {`column`, 6}, {`row`, 7}}}}}}}},
   {-1, {`uuid`, `b19e2149-7fc5-41ec-a8a9-9bc6c6c38c40`},
    {`description`, `Should locate words written bottom left to top right`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `screeaumgr`, `alxhpburyi`,
        `jalaycalmp`, `clojurermt`}},
      {`wordsToSearchFor`,
       {-2, `clojure`, `elixir`, `ecmascript`, `rust`, `java`, `lua`,
        `lisp`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 10}}},
        {`end`, {-1, {`column`, 7}, {`row`, 10}}}}},
      {`elixir`,
       {-1, {`start`, {-1, {`column`, 6}, {`row`, 5}}},
        {`end`, {-1, {`column`, 1}, {`row`, 5}}}}},
      {`ecmascript`,
       {-1, {`start`, {-1, {`column`, 10}, {`row`, 1}}},
        {`end`, {-1, {`column`, 10}, {`row`, 10}}}}},
      {`rust`,
       {-1, {`start`, {-1, {`column`, 9}, {`row`, 5}}},
        {`end`, {-1, {`column`, 9}, {`row`, 2}}}}},
      {`java`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 1}}},
        {`end`, {-1, {`column`, 4}, {`row`, 4}}}}},
      {`lua`,
       {-1, {`start`, {-1, {`column`, 8}, {`row`, 9}}},
        {`end`, {-1, {`column`, 6}, {`row`, 7}}}}},
      {`lisp`,
       {-1, {`start`, {-1, {`column`, 3}, {`row`, 6}}},
        {`end`, {-1, {`column`, 6}, {`row`, 3}}}}}}}},
   {-1, {`uuid`, `69e1d994-a6d7-4e24-9b5a-db76751c2ef8`},
    {`description`, `Should locate words written top right to bottom left`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `screeaumgr`, `alxhpburyi`,
        `jalaycalmp`, `clojurermt`}},
      {`wordsToSearchFor`,
       {-2, `clojure`, `elixir`, `ecmascript`, `rust`, `java`, `lua`,
        `lisp`, `ruby`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 10}}},
        {`end`, {-1, {`column`, 7}, {`row`, 10}}}}},
      {`elixir`,
       {-1, {`start`, {-1, {`column`, 6}, {`row`, 5}}},
        {`end`, {-1, {`column`, 1}, {`row`, 5}}}}},
      {`ecmascript`,
       {-1, {`start`, {-1, {`column`, 10}, {`row`, 1}}},
        {`end`, {-1, {`column`, 10}, {`row`, 10}}}}},
      {`rust`,
       {-1, {`start`, {-1, {`column`, 9}, {`row`, 5}}},
        {`end`, {-1, {`column`, 9}, {`row`, 2}}}}},
      {`java`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 1}}},
        {`end`, {-1, {`column`, 4}, {`row`, 4}}}}},
      {`lua`,
       {-1, {`start`, {-1, {`column`, 8}, {`row`, 9}}},
        {`end`, {-1, {`column`, 6}, {`row`, 7}}}}},
      {`lisp`,
       {-1, {`start`, {-1, {`column`, 3}, {`row`, 6}}},
        {`end`, {-1, {`column`, 6}, {`row`, 3}}}}},
      {`ruby`,
       {-1, {`start`, {-1, {`column`, 8}, {`row`, 6}}},
        {`end`, {-1, {`column`, 5}, {`row`, 9}}}}}}}},
   {-1, {`uuid`, `695531db-69eb-463f-8bad-8de3bf5ef198`},
    {`description`,
     `Should fail to locate a word that is not in the puzzle`},
    {`property`, `search`},
    {`input`,
     {-1,
      {`grid`,
       {-2, `jefblpepre`, `camdcimgtc`, `oivokprjsm`, `pbwasqroua`,
        `rixilelhrs`, `wolcqlirpc`, `screeaumgr`, `alxhpburyi`,
        `jalaycalmp`, `clojurermt`}},
      {`wordsToSearchFor`,
       {-2, `clojure`, `elixir`, `ecmascript`, `rust`, `java`, `lua`,
        `lisp`, `ruby`, `haskell`}}}},
    {`expected`,
     {-1,
      {`clojure`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 10}}},
        {`end`, {-1, {`column`, 7}, {`row`, 10}}}}},
      {`elixir`,
       {-1, {`start`, {-1, {`column`, 6}, {`row`, 5}}},
        {`end`, {-1, {`column`, 1}, {`row`, 5}}}}},
      {`ecmascript`,
       {-1, {`start`, {-1, {`column`, 10}, {`row`, 1}}},
        {`end`, {-1, {`column`, 10}, {`row`, 10}}}}},
      {`rust`,
       {-1, {`start`, {-1, {`column`, 9}, {`row`, 5}}},
        {`end`, {-1, {`column`, 9}, {`row`, 2}}}}},
      {`java`,
       {-1, {`start`, {-1, {`column`, 1}, {`row`, 1}}},
        {`end`, {-1, {`column`, 4}, {`row`, 4}}}}},
      {`lua`,
       {-1, {`start`, {-1, {`column`, 8}, {`row`, 9}}},
        {`end`, {-1, {`column`, 6}, {`row`, 7}}}}},
      {`lisp`,
       {-1, {`start`, {-1, {`column`, 3}, {`row`, 6}}},
        {`end`, {-1, {`column`, 6}, {`row`, 3}}}}},
      {`ruby`,
       {-1, {`start`, {-1, {`column`, 8}, {`row`, 6}}},
        {`end`, {-1, {`column`, 5}, {`row`, 9}}}}},
      {`haskell`, {-3, `null`}}}}},
   {-1, {`uuid`, `fda5b937-6774-4a52-8f89-f64ed833b175`},
    {`description`,
     `Should fail to locate words that are not on horizontal, vertical, or diagonal lines`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `abc`, `def`}},
      {`wordsToSearchFor`, {-2, `aef`, `ced`, `abf`, `cbd`}}}},
    {`expected`,
     {-1, {`aef`, {-3, `null`}}, {`ced`, {-3, `null`}},
      {`abf`, {-3, `null`}}, {`cbd`, {-3, `null`}}}}},
   {-1, {`uuid`, `5b6198eb-2847-4e2f-8efe-65045df16bd3`},
    {`description`,
     `Should not concatenate different lines to find a horizontal word`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `abceli`, `xirdfg`}},
      {`wordsToSearchFor`, {-2, `elixir`}}}},
    {`expected`, {-1, {`elixir`, {-3, `null`}}}}},
   {-1, {`uuid`, `eba44139-a34f-4a92-98e1-bd5f259e5769`},
    {`description`, `Should not wrap around horizontally to find a word`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `silabcdefp`}}, {`wordsToSearchFor`, {-2, `lisp`}}}},
    {`expected`, {-1, {`lisp`, {-3, `null`}}}}},
   {-1, {`uuid`, `cd1f0fa8-76af-4167-b105-935f78364dac`},
    {`description`, `Should not wrap around vertically to find a word`},
    {`property`, `search`},
    {`input`,
     {-1, {`grid`, {-2, `s`, `u`, `r`, `a`, `b`, `c`, `t`}},
      {`wordsToSearchFor`, {-2, `rust`}}}},
    {`expected`, {-1, {`rust`, {-3, `null`}}}}}}}}
}
--</do not edit>


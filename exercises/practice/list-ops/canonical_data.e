-- created automatically by the test generator and brutally overwritten on a regular basis.
-- To permanently mark a test as ignoring all of this copy the following into test.exw:
--<do not edit>
--ignore canonical_data.e
--</do not edit>
-- Otherwise copy/paste this lot (rather than include, so it can verify up-to-date-ness):
--  **NB** If this begins {-1,{`exercise`,`<slug_name>`, then it's still raw json, and the
--          test generator needs updating to munge it, or you can just ignore it as above.
--<do not edit>
constant canonical_data = {
{-1,
 {`exercise`, `list-ops`},
 {`comments`,
  {-2,
   `Though there are no specifications here for dealing with large lists,`,
   `implementers may add tests for handling large lists to ensure that the`,
   `solutions have thought about performance concerns.`}},
 {`cases`,
  {-2,
   {-1, {`description`, `append entries to a list and return the new list`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `485b9452-bf94-40f7-a3db-c3cf4850066a`},
       {`description`, `empty lists`}, {`property`, `append`},
       {`input`, {-1, {`list1`, {-2}}, {`list2`, {-2}}}},
       {`expected`, {-2}}},
      {-1, {`uuid`, `2c894696-b609-4569-b149-8672134d340a`},
       {`description`, `list to empty list`}, {`property`, `append`},
       {`input`, {-1, {`list1`, {-2}}, {`list2`, {-2,1,2,3,4}}}},
       {`expected`, {-2,1,2,3,4}}},
      {-1, {`uuid`, `e842efed-3bf6-4295-b371-4d67a4fdf19c`},
       {`description`, `empty list to list`}, {`property`, `append`},
       {`input`, {-1, {`list1`, {-2,1,2,3,4}}, {`list2`, {-2}}}},
       {`expected`, {-2,1,2,3,4}}},
      {-1, {`uuid`, `71dcf5eb-73ae-4a0e-b744-a52ee387922f`},
       {`description`, `non-empty lists`}, {`property`, `append`},
       {`input`, {-1, {`list1`, {-2,1,2}}, {`list2`, {-2,2,3,4,5}}}},
       {`expected`, {-2,1,2,2,3,4,5}}}}}},
   {-1, {`description`, `concatenate a list of lists`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `28444355-201b-4af2-a2f6-5550227bde21`},
       {`description`, `empty list`}, {`property`, `concat`},
       {`input`, {-1, {`lists`, {-2}}}}, {`expected`, {-2}}},
      {-1, {`uuid`, `331451c1-9573-42a1-9869-2d06e3b389a9`},
       {`description`, `list of lists`}, {`property`, `concat`},
       {`input`, {-1, {`lists`, {-2, {-2,1,2}, {-2,3}, {-2}, {-2,4,5,6}}}}},
       {`expected`, {-2,1,2,3,4,5,6}}},
      {-1, {`uuid`, `d6ecd72c-197f-40c3-89a4-aa1f45827e09`},
       {`description`, `list of nested lists`}, {`property`, `concat`},
       {`input`,
        {-1,
         {`lists`,
          {-2, {-2, {-2,1}, {-2,2}}, {-2, {-2,3}}, {-2, {-2}},
           {-2, {-2,4,5,6}}}}}},
       {`expected`, {-2, {-2,1}, {-2,2}, {-2,3}, {-2}, {-2,4,5,6}}}}}}},
   {-1,
    {`description`,
     `filter list returning only values that satisfy the filter function`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `0524fba8-3e0f-4531-ad2b-f7a43da86a16`},
       {`description`, `empty list`}, {`property`, `filter`},
       {`input`,
        {-1, {`list`, {-2}}, {`function`, `(x) -> x modulo 2 == 1`}}},
       {`expected`, {-2}}},
      {-1, {`uuid`, `88494bd5-f520-4edb-8631-88e415b62d24`},
       {`description`, `non-empty list`}, {`property`, `filter`},
       {`input`,
        {-1, {`list`, {-2,1,2,3,5}}, {`function`, `(x) -> x modulo 2 == 1`}}},
       {`expected`, {-2,1,3,5}}}}}},
   {-1, {`description`, `returns the length of a list`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `1cf0b92d-8d96-41d5-9c21-7b3c37cb6aad`},
       {`description`, `empty list`}, {`property`, `length`},
       {`input`, {-1, {`list`, {-2}}}}, {`expected`, 0}},
      {-1, {`uuid`, `d7b8d2d9-2d16-44c4-9a19-6e5f237cb71e`},
       {`description`, `non-empty list`}, {`property`, `length`},
       {`input`, {-1, {`list`, {-2,1,2,3,4}}}}, {`expected`, 4}}}}},
   {-1,
    {`description`,
     `return a list of elements whose values equal the list value transformed by the mapping function`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `c0bc8962-30e2-4bec-9ae4-668b8ecd75aa`},
       {`description`, `empty list`}, {`property`, `map`},
       {`input`, {-1, {`list`, {-2}}, {`function`, `(x) -> x + 1`}}},
       {`expected`, {-2}}},
      {-1, {`uuid`, `11e71a95-e78b-4909-b8e4-60cdcaec0e91`},
       {`description`, `non-empty list`}, {`property`, `map`},
       {`input`, {-1, {`list`, {-2,1,3,5,7}}, {`function`, `(x) -> x + 1`}}},
       {`expected`, {-2,2,4,6,8}}}}}},
   {-1,
    {`description`,
     `folds (reduces) the given list from the left with a function`},
    {`comments`,
     {-2,
      `For function: acc is the accumulator and el is the current element.  `,
      `The order of the arguments (ie. acc, el or el, acc) should match the `,
      `conventions common to the language of the track implementing this.   `,
      `See https://github.com/exercism/problem-specifications/pull/1746#discussion_r548303995 for further advice.`}},
    {`cases`,
     {-2,
      {-1, {`uuid`, `36549237-f765-4a4c-bfd9-5d3a8f7b07d2`},
       {`description`, `empty list`},
       {`comments`,
        {-2,
         `Reimplemented to remove ambiguity about the parameters of the    `,
         `function input.`}}, {`property`, `foldl`},
       {`input`,
        {-1, {`list`, {-2}}, {`initial`, 2},
         {`function`, `(acc, el) -> el * acc`}}}, {`expected`, 2}},
      {-1, {`uuid`, `7a626a3c-03ec-42bc-9840-53f280e13067`},
       {`description`,
        `direction independent function applied to non-empty list`},
       {`comments`,
        {-2,
         `Reimplemented to remove ambiguity about the parameters of the    `,
         `function input.`}}, {`property`, `foldl`},
       {`input`,
        {-1, {`list`, {-2,1,2,3,4}}, {`initial`, 5},
         {`function`, `(acc, el) -> el + acc`}}}, {`expected`, 15}},
      {-1, {`uuid`, `d7fcad99-e88e-40e1-a539-4c519681f390`},
       {`description`,
        `direction dependent function applied to non-empty list`},
       {`comments`,
        {-2,
         `Reimplemented to remove ambiguity about the parameters of the    `,
         `function input. Expects / to preserve fractions. Integer division`,
         `will not work here, since it would compute 1 / 24 = 0. Use the   `,
         `original test values (d2cf5644-aee1-4dfc-9b88-06896676fe27) if   `,
         `integer division is expected / required.                         `}},
       {`property`, `foldl`},
       {`input`,
        {-1, {`list`, {-2,1,2,3,4}}, {`initial`, 24},
         {`function`, `(acc, el) -> el / acc`}}}, {`expected`, 64}}}}},
   {-1,
    {`description`,
     `folds (reduces) the given list from the right with a function`},
    {`comments`,
     {-2,
      `For function: acc is the accumulator and el is the current element   `,
      `The order of the arguments (ie. acc, el or el, acc) should match the `,
      `conventions common to the language of the track implementing this.   `,
      `See https://github.com/exercism/problem-specifications/pull/1746#discussion_r548303995 for further advice.`}},
    {`cases`,
     {-2,
      {-1, {`uuid`, `17214edb-20ba-42fc-bda8-000a5ab525b0`},
       {`description`, `empty list`},
       {`comments`,
        {-2,
         `Reimplemented to remove ambiguity about the parameters of the    `,
         `function input.`}}, {`property`, `foldr`},
       {`input`,
        {-1, {`list`, {-2}}, {`initial`, 2},
         {`function`, `(acc, el) -> el * acc`}}}, {`expected`, 2}},
      {-1, {`uuid`, `e1c64db7-9253-4a3d-a7c4-5273b9e2a1bd`},
       {`description`,
        `direction independent function applied to non-empty list`},
       {`comments`,
        {-2,
         `Reimplemented to remove ambiguity about the parameters of the    `,
         `function input.`}}, {`property`, `foldr`},
       {`input`,
        {-1, {`list`, {-2,1,2,3,4}}, {`initial`, 5},
         {`function`, `(acc, el) -> el + acc`}}}, {`expected`, 15}},
      {-1, {`uuid`, `8066003b-f2ff-437e-9103-66e6df474844`},
       {`description`,
        `direction dependent function applied to non-empty list`},
       {`comments`,
        {-2,
         `Reimplemented to remove ambiguity about the parameters of the    `,
         `function input. Expects / to preserve fractions. Integer division`,
         `will not work here, since it would compute 4 / 24 = 1 / 6. Use   `,
         `the original test values (be396a53-c074-4db3-8dd6-f7ed003cce7c)  `,
         `if integer division is expected / required.`}},
       {`property`, `foldr`},
       {`input`,
        {-1, {`list`, {-2,1,2,3,4}}, {`initial`, 24},
         {`function`, `(acc, el) -> el / acc`}}}, {`expected`, 9}}}}},
   {-1, {`description`, `reverse the elements of the list`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `94231515-050e-4841-943d-d4488ab4ee30`},
       {`description`, `empty list`}, {`property`, `reverse`},
       {`input`, {-1, {`list`, {-2}}}}, {`expected`, {-2}}},
      {-1, {`uuid`, `fcc03d1e-42e0-4712-b689-d54ad761f360`},
       {`description`, `non-empty list`}, {`property`, `reverse`},
       {`input`, {-1, {`list`, {-2,1,3,5,7}}}}, {`expected`, {-2,7,5,3,1}}},
      {-1, {`uuid`, `40872990-b5b8-4cb8-9085-d91fc0d05d26`},
       {`description`, `list of lists is not flattened`},
       {`property`, `reverse`},
       {`input`, {-1, {`list`, {-2, {-2,1,2}, {-2,3}, {-2}, {-2,4,5,6}}}}},
       {`expected`, {-2, {-2,4,5,6}, {-2}, {-2,3}, {-2,1,2}}}}}}}}}}
}
--</do not edit>


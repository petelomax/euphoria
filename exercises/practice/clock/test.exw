include clock.e

--<do not edit>
--ignore canonical_data.e
--</do not edit>

set_test_verbosity(TEST_SHOW_ALL)
procedure testequal(string b,a,d) test_equal(a,b,d) end procedure
testequal("08:00",clock_str(create_clock(8, 0)),"Create a new clock with an initial time - on the hour")
testequal("11:09",clock_str(create_clock(11, 9)),"Create a new clock with an initial time - past the hour")
testequal("00:00",clock_str(create_clock(24, 0)),"Create a new clock with an initial time - midnight is zero hours")
testequal("01:00",clock_str(create_clock(25, 0)),"Create a new clock with an initial time - hour rolls over")
testequal("04:00",clock_str(create_clock(100, 0)),"Create a new clock with an initial time - hour rolls over continuously")
testequal("02:00",clock_str(create_clock(1, 60)),"Create a new clock with an initial time - sixty minutes is next hour")
testequal("02:40",clock_str(create_clock(0, 160)),"Create a new clock with an initial time - minutes roll over")
testequal("04:43",clock_str(create_clock(0, 1723)),"Create a new clock with an initial time - minutes roll over continuously")
testequal("03:40",clock_str(create_clock(25, 160)),"Create a new clock with an initial time - hour and minutes roll over")
testequal("11:01",clock_str(create_clock(201, 3001)),"Create a new clock with an initial time - hour and minutes roll over continuously")
testequal("00:00",clock_str(create_clock(72, 8640)),"Create a new clock with an initial time - hour and minutes roll over to exactly midnight")
testequal("23:15",clock_str(create_clock(-1, 15)),"Create a new clock with an initial time - negative hour")
testequal("23:00",clock_str(create_clock(-25, 0)),"Create a new clock with an initial time - negative hour rolls over")
testequal("05:00",clock_str(create_clock(-91, 0)),"Create a new clock with an initial time - negative hour rolls over continuously")
testequal("00:20",clock_str(create_clock(1, -40)),"Create a new clock with an initial time - negative minutes")
testequal("22:20",clock_str(create_clock(1, -160)),"Create a new clock with an initial time - negative minutes roll over")
testequal("01:00",clock_str(create_clock(2, -60)),"Create a new clock with an initial time - negative sixty minutes is previous hour")
testequal("20:20",clock_str(create_clock(-25, -160)),"Create a new clock with an initial time - negative hour and minutes both roll over")
testequal("22:10",clock_str(create_clock(-121, -5810)),"Create a new clock with an initial time - negative hour and minutes both roll over continuously")
testequal("10:03",clock_str(add_mins(create_clock(10, 0), 3)),"Add minutes - add minutes")
testequal("06:41",clock_str(add_mins(create_clock(6, 41), 0)),"Add minutes - add no minutes")
testequal("01:25",clock_str(add_mins(create_clock(0, 45), 40)),"Add minutes - add to next hour")
testequal("11:01",clock_str(add_mins(create_clock(10, 0), 61)),"Add minutes - add more than one hour")
testequal("03:25",clock_str(add_mins(create_clock(0, 45), 160)),"Add minutes - add more than two hours with carry")
testequal("00:01",clock_str(add_mins(create_clock(23, 59), 2)),"Add minutes - add across midnight")
testequal("06:32",clock_str(add_mins(create_clock(5, 32), 1500)),"Add minutes - add more than one day (1500 min = 25 hrs)")
testequal("11:21",clock_str(add_mins(create_clock(1, 1), 3500)),"Add minutes - add more than two days")
testequal("10:00",clock_str(sub_mins(create_clock(10, 3), 3)),"Subtract minutes - subtract minutes")
testequal("09:33",clock_str(sub_mins(create_clock(10, 3), 30)),"Subtract minutes - subtract to previous hour")
testequal("08:53",clock_str(sub_mins(create_clock(10, 3), 70)),"Subtract minutes - subtract more than an hour")
testequal("23:59",clock_str(sub_mins(create_clock(0, 3), 4)),"Subtract minutes - subtract across midnight")
testequal("21:20",clock_str(sub_mins(create_clock(0, 0), 160)),"Subtract minutes - subtract more than two hours")
testequal("03:35",clock_str(sub_mins(create_clock(6, 15), 160)),"Subtract minutes - subtract more than two hours with borrow")
testequal("04:32",clock_str(sub_mins(create_clock(5, 32), 1500)),"Subtract minutes - subtract more than one day (15000 mins = 25 hrs)")
testequal("00:20",clock_str(sub_mins(create_clock(2, 20), 3000)),"Subtract minutes - subtract more than two days")
test_true(equal_clocks(create_clock(15,37),create_clock(15, 37)),"Compare two clocks for equality - clocks with same time")
test_false(equal_clocks(create_clock(15,36),create_clock(15, 37)),"Compare two clocks for equality - clocks a minute apart")
test_false(equal_clocks(create_clock(14,37),create_clock(15, 37)),"Compare two clocks for equality - clocks an hour apart")
test_true(equal_clocks(create_clock(10,37),create_clock(34, 37)),"Compare two clocks for equality - clocks with hour overflow")
test_true(equal_clocks(create_clock(3, 11),create_clock(99, 11)),"Compare two clocks for equality - clocks with hour overflow by several days")
test_true(equal_clocks(create_clock(22,40),create_clock(-2, 40)),"Compare two clocks for equality - clocks with negative hour")
test_true(equal_clocks(create_clock(17, 3),create_clock(-31, 3)),"Compare two clocks for equality - clocks with negative hour that wraps")
test_true(equal_clocks(create_clock(13,49),create_clock(-83, 49)),"Compare two clocks for equality - clocks with negative hour that wraps multiple times")
test_true(equal_clocks(create_clock(0, 1),create_clock(0, 1441)),"Compare two clocks for equality - clocks with minute overflow")
test_true(equal_clocks(create_clock(2, 2),create_clock(2, 4322)),"Compare two clocks for equality - clocks with minute overflow by several days")
test_true(equal_clocks(create_clock(2, 40),create_clock(3, -20)),"Compare two clocks for equality - clocks with negative minute")
test_true(equal_clocks(create_clock(4, 10),create_clock(5, -1490)),"Compare two clocks for equality - clocks with negative minute that wraps")
test_true(equal_clocks(create_clock(6, 15),create_clock(6, -4305)),"Compare two clocks for equality - clocks with negative minute that wraps multiple times")
test_true(equal_clocks(create_clock(7, 32),create_clock(-12, -268)),"Compare two clocks for equality - clocks with negative hours and minutes")
test_true(equal_clocks(create_clock(18, 7),create_clock(-54, -11513)),"Compare two clocks for equality - clocks with negative hours and minutes that wrap")
test_true(equal_clocks(create_clock(24, 0),create_clock(0, 0)),"Compare two clocks for equality - full clock and zeroed clock")
test_summary()


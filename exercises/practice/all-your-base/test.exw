include lib/errors.e

include all-your-base.e

set_test_verbosity(TEST_SHOW_ALL)
test_equal(rebase(2,{1},10),            {OK,{1}},           "single bit one to decimal")
test_equal(rebase(2,{1,0,1},10),        {OK,{5}},           "binary to single decimal")
test_equal(rebase(10,{5},2),            {OK,{1,0,1}},       "single decimal to binary")
test_equal(rebase(2,{1,0,1,0,1,0},10),  {OK,{4,2}},         "binary to multiple decimal")
test_equal(rebase(10,{4,2},2),          {OK,{1,0,1,0,1,0}}, "decimal to binary")
test_equal(rebase(3,{1,1,2,0},16),      {OK,{2,10}},        "trinary to hexadecimal")
test_equal(rebase(16,{2,10},3),         {OK,{1,1,2,0}},     "hexadecimal to trinary")
test_equal(rebase(97,{3,46,60},73),     {OK,{6,10,45}},     "15-bit integer")
test_equal(rebase(2,{},10),             {OK,{0}},           "empty list")
test_equal(rebase(10,{0},2),            {OK,{0}},           "single zero")
test_equal(rebase(10,{0,0,0},2),        {OK,{0}},           "multiple zeros")
test_equal(rebase(7,{0,6,0},10),        {OK,{4,2}},         "leading zeros")

test_equal(rebase(1,{0},10),            {ERROR, "input base must be >= 2"}, "input base is one")
test_equal(rebase(0,{},10),             {ERROR, "input base must be >= 2"}, "input base is zero")
test_equal(rebase(-2,{1},10),           {ERROR, "input base must be >= 2"}, "input base is negative")
test_equal(rebase(2,{1,-1,1,0,1,0},10), {ERROR, "all digits must satisfy 0 <= d < input base"}, "negative digit")
test_equal(rebase(2,{1,2,1,0,1,0},10),  {ERROR, "all digits must satisfy 0 <= d < input base"}, "invalid positive digit")
test_equal(rebase(2,{1,0,1,0,1,0},1),   {ERROR, "output base must be >= 2"}, "output base is one")
test_equal(rebase(10,{7},0),            {ERROR, "output base must be >= 2"}, "output base is zero")
test_equal(rebase(2,{1},-7),            {ERROR, "output base must be >= 2"}, "output base is negative")
test_equal(rebase(-2,{1},-7),           {ERROR, "input base must be >= 2"}, "both bases are negative")
test_summary() 


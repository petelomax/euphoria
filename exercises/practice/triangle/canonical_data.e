-- created automatically by the test generator and brutally overwritten on a regular basis.
-- To permanently mark a test as ignoring all of this copy the following into test.exw:
--<do not edit>
--ignore canonical_data.e
--</do not edit>
-- Otherwise copy/paste this lot (rather than include, so it can verify up-to-date-ness):
--  **NB** If this begins {-1,{`exercise`,`<slug_name>`, then it's still raw json, and the
--          test generator needs updating to munge it, or you can just ignore it as above.
--<do not edit>
constant canonical_data = {
{-1,
 {`exercise`, `triangle`},
 {`comments`,
  {-2,
   ` Pursuant to discussion in #202, we have decided NOT to test triangles `,
   ` where all side lengths are positive but a + b = c. e.g:               `,
   ` (2, 4, 2, Isosceles), (1, 3, 4, Scalene).                             `,
   ` It's true that the triangle inequality admits such triangles.These    `,
   ` triangles have zero area, however.                                    `,
   ` They're degenerate triangles with all three vertices collinear.       `,
   ` (In contrast, we will test (0, 0, 0, Illegal), as it is a point)      `,
   ` The tests assert properties of the triangle are true or false.        `,
   ` See: https://github.com/exercism/problem-specifications/issues/379 for disscussion  `,
   ` of this approach                                                      `,
   ` How you handle invalid triangles is up to you. These tests suggest a  `,
   ` triangle is returned, but all of its properties are false. But you    `,
   ` could also have the creation of an invalid triangle return an error   `,
   ` or exception. Choose what is idiomatic for your language.             `}},
 {`cases`,
  {-2,
   {-1, {`description`, `equilateral triangle`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `8b2c43ac-7257-43f9-b552-7631a91988af`},
       {`description`, `all sides are equal`}, {`property`, `equilateral`},
       {`input`, {-1, {`sides`, {-2,2,2,2}}}}, {`expected`, {-3, `true`}}},
      {-1, {`uuid`, `33eb6f87-0498-4ccf-9573-7f8c3ce92b7b`},
       {`description`, `any side is unequal`}, {`property`, `equilateral`},
       {`input`, {-1, {`sides`, {-2,2,3,2}}}}, {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `c6585b7d-a8c0-4ad8-8a34-e21d36f7ad87`},
       {`description`, `no sides are equal`}, {`property`, `equilateral`},
       {`input`, {-1, {`sides`, {-2,5,4,6}}}}, {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `16e8ceb0-eadb-46d1-b892-c50327479251`},
       {`description`, `all zero sides is not a triangle`},
       {`property`, `equilateral`}, {`input`, {-1, {`sides`, {-2,0,0,0}}}},
       {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `3022f537-b8e5-4cc1-8f12-fd775827a00c`},
       {`description`, `sides may be floats`},
       {`comments`,
        {-2, ` Your track may choose to skip this test    `,
         ` and deal only with integers if appropriate `}},
       {`scenarios`, {-2, `floating-point`}}, {`property`, `equilateral`},
       {`input`, {-1, {`sides`, {-2,0.5,0.5,0.5}}}},
       {`expected`, {-3, `true`}}}}}},
   {-1, {`description`, `isosceles triangle`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `cbc612dc-d75a-4c1c-87fc-e2d5edd70b71`},
       {`description`, `last two sides are equal`},
       {`property`, `isosceles`}, {`input`, {-1, {`sides`, {-2,3,4,4}}}},
       {`expected`, {-3, `true`}}},
      {-1, {`uuid`, `e388ce93-f25e-4daf-b977-4b7ede992217`},
       {`description`, `first two sides are equal`},
       {`property`, `isosceles`}, {`input`, {-1, {`sides`, {-2,4,4,3}}}},
       {`expected`, {-3, `true`}}},
      {-1, {`uuid`, `d2080b79-4523-4c3f-9d42-2da6e81ab30f`},
       {`description`, `first and last sides are equal`},
       {`property`, `isosceles`}, {`input`, {-1, {`sides`, {-2,4,3,4}}}},
       {`expected`, {-3, `true`}}},
      {-1, {`uuid`, `8d71e185-2bd7-4841-b7e1-71689a5491d8`},
       {`description`, `equilateral triangles are also isosceles`},
       {`property`, `isosceles`}, {`input`, {-1, {`sides`, {-2,4,4,4}}}},
       {`expected`, {-3, `true`}}},
      {-1, {`uuid`, `840ed5f8-366f-43c5-ac69-8f05e6f10bbb`},
       {`description`, `no sides are equal`}, {`property`, `isosceles`},
       {`input`, {-1, {`sides`, {-2,2,3,4}}}}, {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `2eba0cfb-6c65-4c40-8146-30b608905eae`},
       {`description`, `first triangle inequality violation`},
       {`property`, `isosceles`}, {`input`, {-1, {`sides`, {-2,1,1,3}}}},
       {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `278469cb-ac6b-41f0-81d4-66d9b828f8ac`},
       {`description`, `second triangle inequality violation`},
       {`property`, `isosceles`}, {`input`, {-1, {`sides`, {-2,1,3,1}}}},
       {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `90efb0c7-72bb-4514-b320-3a3892e278ff`},
       {`description`, `third triangle inequality violation`},
       {`property`, `isosceles`}, {`input`, {-1, {`sides`, {-2,3,1,1}}}},
       {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `adb4ee20-532f-43dc-8d31-e9271b7ef2bc`},
       {`description`, `sides may be floats`},
       {`comments`,
        {-2, ` Your track may choose to skip this test    `,
         ` and deal only with integers if appropriate `}},
       {`scenarios`, {-2, `floating-point`}}, {`property`, `isosceles`},
       {`input`, {-1, {`sides`, {-2,0.5,0.4,0.5}}}},
       {`expected`, {-3, `true`}}}}}},
   {-1, {`description`, `scalene triangle`},
    {`cases`,
     {-2,
      {-1, {`uuid`, `e8b5f09c-ec2e-47c1-abec-f35095733afb`},
       {`description`, `no sides are equal`}, {`property`, `scalene`},
       {`input`, {-1, {`sides`, {-2,5,4,6}}}}, {`expected`, {-3, `true`}}},
      {-1, {`uuid`, `2510001f-b44d-4d18-9872-2303e7977dc1`},
       {`description`, `all sides are equal`}, {`property`, `scalene`},
       {`input`, {-1, {`sides`, {-2,4,4,4}}}}, {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `c6e15a92-90d9-4fb3-90a2-eef64f8d3e1e`},
       {`description`, `first and second sides are equal`},
       {`property`, `scalene`}, {`input`, {-1, {`sides`, {-2,4,4,3}}}},
       {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `3da23a91-a166-419a-9abf-baf4868fd985`},
       {`description`, `first and third sides are equal`},
       {`property`, `scalene`}, {`input`, {-1, {`sides`, {-2,3,4,3}}}},
       {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `b6a75d98-1fef-4c42-8e9a-9db854ba0a4d`},
       {`description`, `second and third sides are equal`},
       {`property`, `scalene`}, {`input`, {-1, {`sides`, {-2,4,3,3}}}},
       {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `70ad5154-0033-48b7-af2c-b8d739cd9fdc`},
       {`description`, `may not violate triangle inequality`},
       {`property`, `scalene`}, {`input`, {-1, {`sides`, {-2,7,3,2}}}},
       {`expected`, {-3, `false`}}},
      {-1, {`uuid`, `26d9d59d-f8f1-40d3-ad58-ae4d54123d7d`},
       {`description`, `sides may be floats`},
       {`comments`,
        {-2, ` Your track may choose to skip this test    `,
         ` and deal only with integers if appropriate `}},
       {`scenarios`, {-2, `floating-point`}}, {`property`, `scalene`},
       {`input`, {-1, {`sides`, {-2,0.5,0.4,0.6}}}},
       {`expected`, {-3, `true`}}}}}}}}}
}
--</do not edit>

